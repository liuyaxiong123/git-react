/*
    混合(mixins)
    在SASS中没有@arguments
    我们可以通过 ... 语法实现获取多个参数
*/
// @mixin box-shadow($shadow...){
//     -webkit-box-shadow:$shadow;
//     -moz-box-shadow:$shadow;
//     -ms-box-shadow:$shadow;
//     -o-box-shadow:$shadow;
//     box-shadow: $shadow;
// }   
// div{
//     width: 200px;
//     height: 200px;
//     background: orange;
//     @include box-shadow(10px 10px 5px red,-10px -10px 5px blue,0 0 10px #ccc);
// }
//----------------------------------
/*
    继承:
    继承是用来实现对其他类，或者元素，或者id的样式继承
    语法：
    @extend 选择器
    sass不仅可以继承元素名称选择器，而且还可以继承自定义元素名称选择器
*/
// div{
//     width: 100px;
// }
// .app{
//     background: orange;
// }
// #demo{
//     border: 1px solid #000;
// }
// mydiv{
//     color:red;
// }
// h1{
//     @extend div;
//     @extend .app;
//     @extend #demo;
//     @extend mydiv;
// }
//---------------------
//继承与混合区别以及特点
/*
        继承：
        1.定义对个同名的继承，不会出现覆盖现象，多个同名继承都会被保留，在使用时都会被继承.
        2.不存在作用域概念
        1.定义多个同名的混合，不能共存，在@include时会引入代码上面的最后一个混合
        2.定义在作用域内部的混合，我们在作用域外部是不可以访问的
*/
// mystyle{
//     color:red;
// }
// mystyle{
//     background: orange;
// }
// @mixin setF{
//     font-size: 40px;
// }
// @mixin setF{
//     font-weight: bold;
// }
// h1{
//     @include setF;
//     @extend mystyle;
// }
// body{
//     @mixin setT{
//         text-align: center;
//     }
//     mystyle{
//         width: 300px;
//         height: 300px;
//     }
// }
//----------------------
/*
    占位符
    有时候在继承的过程中不想将继承的样式保留在css里，但是这段样式要被其他选择器继承，因此还必须在文件中定义该样式，此时可以通过占位符 % 来实现
    %表示临时写的一组样式，编译时会被删除
    注意：占位符只能应用于元素选择器，当应用在其他选择器上会报错
*/
// div{
//     width: 100px;
//     height: 100px;
//     background: orange;
// }
// %mydiv{
//     color:red;
// }
// h1{
//     @extend div;
//     @extend %mydiv;
// }
//----------------------------
/*

    数字运算:
    在sass中我们可以包含单位运算
    注意：1.除法必须加上()2.运算的单位必须统一

*/
// $w:1000px;
// div{
//     // width:100px *2 + 10px;
//     // width:3em*2;
//     //  width:3em*2em;//报错
//     // width:50% * 2;
//     // width: 100% + 2px;//报错
//     // width: $w-200px;
//     // width:$w/5;
//     // width:500/2px;//报错
//     width:(500px/2);//正确
// }
//--------------------------------
/*颜色值运算*/
// div{
//     // background: #123456+#333333;
//     // background: (#666/2);
//     // background: rgb(90,100,50) + rgb(100,200,90);
//     // background: #333*2;
// }
/*
    +:可以做拼接，将两个字符拼接到一起
*/
// $cur:"-repeat";
// body{
//     background-repeat: no + $cur;//no-repeat
// }
//--------------------
/*
    插值：
    作用是为了动态的去创建一些属性
    语法：
*/
// $dir:top;
// div{
//     border-#{$dir}:1px solid red;
// }
// $cls:box;
// .#{$cls}{
//     border-#{$dir}:1px solid red;
// }
// /*制作三角形*/
// @mixin arrow ($dir:top,$w:10px,$c:#000){
//     border:$w solid transparent;
//     border-#{$dir}:$w solid $c;
//     width: 0;height: 0;font-size: 0;
// }
// header{
//     @include arrow(left,20px,green);
// }
// footer{
//     @include arrow(bottom,15px,blue);
// }
// h1{
//     @include arrow(right,30px,orange);
// }
//---------------------------------
/*
    if语句：
    语法：
    通过@if来定义if语句
    通过@else if 定义else if语句
    通过@else 定义else语句
*/
// @mixin arrow ($dir:top,$w:10px,$c:#000,$h:$w){
//     border:$w solid transparent;
//     border-#{$dir}:$w solid $c;
//     @if $dir==top or $dir==bottom{
//         border-left-width:$h;
//         border-right-width:$h;
//     }
//     @else{
//         border-top-width:$h;
//         border-bottom-width:$h;
//     }
//     width: 0;height: 0;font-size: 0;
// }
// header{
//     @include arrow(top,20px,red,40px);
// }
// footer{
//     @include arrow(right,15px,orange,50px);
// }
//---------------------------
// $size:600;
// div{
//     @if $size>1000{
//         width: 980px;
//     }
//     @else if $size<1000 and $size >750{
//         width: 760px;
//     }
//     @else{
//         width: 640px;
//     }
// }

// h1{
//     @extend div;
// }
// $size:600;
// @if $size>600{
//     %box{
//         background: orange;
//     }
// }
// @else{
//     %box{
//         background: pink;
//     }
// }
// h1{
//     @extend %box;
// }
//--------------------------
/*
    for循环：
    语法：
    @for $i start through end {
        里面是循环逻辑
    }
    $i :在循环这种可以访问到的变量
    start:起始值,包括他
    end:结束值
*/
// @for $i from 1 through 10{
//     .item-#{$i}{
//         background: #010*$i;
//     }
// }
// //栅格系统样式
// @for $j from 1 through 12{
//     .col-lg-#{$j}{
//         width:100%/12*$j;
//     }
//     .col-md-#{$j}{
//         width: 100% / 12 *$j;
//     }
// }
//-------------------------
/*
    while循环
    语法：
    @while 循环条件{//里面是循环逻辑}
    当循环条件满足时，会执行该循环
*/
// $i:1;
// @while $i < 12{
//     .col-lg-#{$i}{
//         width:100% / 12 * $i;
//     }
//     $i:$i + 1;
// }
//------------------
/*
    三元运算：
    在sass中我们可以通过if关键词实现三元运算
    语法：if(条件，true结果，false结果)
    那些是真的：所有的数字，所有的字符串
*/
// $isGreen:false;
// body{
//     // background: if($isGreen,green,blue);
//     background: if($isGreen,red,pink);
// }
//-------------------------
@import './test.scss';
div{
    @include transition;
}
h1{
    @include transition(2s ease-in 1s);
}